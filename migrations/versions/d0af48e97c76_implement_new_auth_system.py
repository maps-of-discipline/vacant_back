"""implement new auth system

Revision ID: d0af48e97c76
Revises: 9c97e915705a
Create Date: 2025-03-29 18:14:42.378324

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'd0af48e97c76'
down_revision: Union[str, None] = '9c97e915705a'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('role_has_permission')
    op.drop_table('user_has_role')
    op.drop_table('token')
    op.drop_table('role')
    op.drop_table('permission')
    op.drop_constraint('application_user_id_fkey', 'application', type_='foreignkey')
    op.drop_column('application', 'user_id')
    op.alter_column('user', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.drop_constraint('user_external_id_key', 'user', type_='unique')
    op.drop_column('user', 'external_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user', sa.Column('external_id', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.create_unique_constraint('user_external_id_key', 'user', ['external_id'])
    op.alter_column('user', 'id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.add_column('application', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.create_foreign_key('application_user_id_fkey', 'application', 'user', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_table('permission',
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('permission_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id', name='permission_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('role',
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('role_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('external_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='role_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('token',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_agent', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('token', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('exp', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='token_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='token_pkey')
    )
    op.create_table('user_has_role',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], name='user_has_role_role_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='user_has_role_user_id_fkey', ondelete='CASCADE')
    )
    op.create_table('role_has_permission',
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('permission_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['permission_id'], ['permission.id'], name='role_has_permission_permission_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], name='role_has_permission_role_id_fkey', ondelete='CASCADE')
    )
    # ### end Alembic commands ###
